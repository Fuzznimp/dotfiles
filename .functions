export_dotfiles() {
  cp.zshrc \
  && cp.alias \
  && cp.function \
  && cp.gitconfig \
  && cp.gitignore \
}

import_dotfiles() {
  cp ~/workspace/dotfiles/.zshrc ~/.zshrc \
  && cp ~/workspace/dotfiles/.aliases ~/.zsh/.aliases \
  && cp ~/workspace/dotfiles/.functions ~/.zsh \
  && cp ~/workspace/dotfiles.gitconfig ~/.gitconfig \
  && cp ~/workspace/dotfiles/.gitignore ~/.gitignore \
}

function find-exec() {
  find . -type f -iname "*${1:-}*" -exec "${2:-file}" '{}' \;
}

# Better find(1)
function ff() {
  find . -iname "*${1:-}*"
}

api_key() {
  size=${1:-16}
  openssl rand -hex ${size}
}

gclone() {
	git clone "$1" && cd "$(basename "$1" .git)"
}

# Markdown
md() {
  pandoc $1 | lynx -stdin -dump
}

# Open man page as PDF
manpdf() {
  man -t "$1" | open -f -a /Applications/Preview.app/
}

mk() {
  mkdir -p "$@" && cd "$@"
}

port_in_use() {
  local port=${1:?"you should set a port"}
  lsof -n -i:${port} | grep LISTEN
}

uuid() {
  uuidgen | tr '[:upper:]' '[:lower:]' | tr -d '\n'
}

wth() {
  city=${1:?"Choose a city"}
  curl "wttr.in/${city}"
}

function _calcram() {
  local sum
  sum=0
  for i in `ps aux | grep -i "$1" | grep -v "grep" | awk '{print $6}'`; do
    sum=$(($i + $sum))
  done
  sum=$(echo "scale=2; $sum / 1024.0" | bc)
  echo $sum
}

# Show how much RAM application uses.
# $ ram safari
# # => safari uses 154.69 MBs of RAM
function ram() {
  local sum
  local app="$1"
  if [ -z "$app" ]; then
    echo "First argument - pattern to grep from processes"
    return 0
  fi

  sum=$(_calcram $app)
  if [[ $sum != "0" ]]; then
    echo "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM"
  else
    echo "No active processes matching pattern '${fg[blue]}${app}${reset_color}'"
  fi
}

# Same, but tracks RAM usage in realtime. Will run until you stop it.
# $ rams safari
function rams() {
  local sum
  local app="$1"
  if [ -z "$app" ]; then
    echo "First argument - pattern to grep from processes"
    return 0
  fi

  while true; do
    sum=$(_calcram $app)
    if [[ $sum != "0" ]]; then
      echo -en "${fg[blue]}${app}${reset_color} uses ${fg[green]}${sum}${reset_color} MBs of RAM\r"
    else
      echo -en "No active processes matching pattern '${fg[blue]}${app}${reset_color}'\r"
    fi
    sleep 1
  done
}

# $ size dir1 file2.js
function size() {
  # du -scBM | sort -n
  du -shck "$@" | sort -rn | awk '
      function human(x) {
          s="kMGTEPYZ";
          while (x>=1000 && length(s)>1)
              {x/=1024; s=substr(s,2)}
          return int(x+0.5) substr(s,1,1)
      }
      {gsub(/^[0-9]+/, human($1)); print}'
}